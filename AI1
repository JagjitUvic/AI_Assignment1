{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "5\n",
      "9\n",
      "12\n",
      "14\n",
      "18\n",
      "22\n",
      "26\n",
      "28\n",
      "30\n",
      "33\n",
      "34\n",
      "38\n",
      "40\n",
      "44\n",
      "46\n",
      "49\n",
      "53\n",
      "56\n",
      "59\n",
      "61\n",
      "63\n",
      "65\n",
      "68\n",
      "69\n",
      "72\n",
      "(['A', 'Q', 'N'], ['N'])\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10aabe8d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import random as rand\n",
    "import collections as coll\n",
    "from math import *\n",
    "from numpy  import array\n",
    "from scipy.spatial import distance\n",
    "import networkx as nx\n",
    "import matplotlib.pyplot as plt\n",
    "from Queue import Queue\n",
    "from Queue import PriorityQueue\n",
    "\n",
    "# function to form the world and select cities out of it\n",
    "def construct_world():\n",
    "    # world height width\n",
    "    width,height = 100,100\n",
    "    c_width,c_height = 26,26\n",
    "    # world matrix\n",
    "    world = [[0for x in range(width)] for y in range (height)]\n",
    "    city = [[0for x in range(c_width)] for y in range (c_height)]\n",
    "    # world cities\n",
    "    cities = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']\n",
    "    # define dictionary\n",
    "    cordinates = coll.defaultdict(list)\n",
    "    # looping and adding random values\n",
    "    for x in range(0, 26):\n",
    "        x_coordinate = rand.randint(0,100)\n",
    "        y_coordinate = rand.randint(0,100)\n",
    "        cordinates[\"vertex_x\"].append(x_coordinate)\n",
    "        cordinates[\"vertex_y\"].append(y_coordinate)\n",
    "        cordinates[\"vertex\"].append(cities[x])\n",
    "    # return the cordinate dictionary\n",
    "    return cordinates\n",
    "        \n",
    "        \n",
    "# function to for the distance graph with vertices\n",
    "def construct_graph():\n",
    "    branches=0\n",
    "    cordinates = {}\n",
    "    # call the construct world function\n",
    "    cordinates = construct_world()    \n",
    "    # neighbour list\n",
    "    nearby = coll.defaultdict(list)\n",
    "    # distance list\n",
    "    width,height = 26,26\n",
    "    distance = [[10for x in range(width)] for y in range (height)]\n",
    "    # initialize graph\n",
    "    graph = {}\n",
    "    # looping through the entire array to find out the closest 5 neighbours \n",
    "    for x in range(0, 26):\n",
    "        # looping to find distance\n",
    "        for y in range(0, 26):\n",
    "            # checking if same vertex\n",
    "            if cordinates[\"vertex\"][x] != cordinates[\"vertex\"][y]:\n",
    "                # calculate distance for all neighbours\n",
    "                distance[x][y] = round((sqrt((abs((cordinates[\"vertex_x\"][y]-cordinates[\"vertex_x\"][x])))^2 + (abs((cordinates[\"vertex_y\"][y]-cordinates[\"vertex_y\"][x])))^2)),1)\n",
    "        # random select the number of nearby nodes\n",
    "        nearby = rand.randint(1,4)\n",
    "        # add the number of nearby branches into the total branches number\n",
    "        branches = branches + nearby\n",
    "        print branches\n",
    "        # arrange smallest first\n",
    "        idx = np.argpartition(distance, nearby)\n",
    "        # constructing the graph\n",
    "        graph[cordinates[\"vertex\"][x]] = {}\n",
    "        for neighbour in range(0, nearby):\n",
    "            if distance[x][idx[x][neighbour]] == 0:\n",
    "               distance[x][idx[x][neighbour]] = .1 \n",
    "            graph[cordinates[\"vertex\"][x]][cordinates[\"vertex\"][idx[x][neighbour]]] = distance[x][idx[x][neighbour]]\n",
    "    # return graph  \n",
    "    return graph,cordinates\n",
    "\n",
    "# implement BFS\n",
    "def bfs_graph(graph, start, end):\n",
    "    # put the start on top of the queue\n",
    "    queue = [start]\n",
    "    # list of all visited nodes\n",
    "    visited = []\n",
    "    # looping until queue is empty\n",
    "    while queue:\n",
    "        # explore top most element in queue\n",
    "        node = queue.pop(0)\n",
    "        # if not previously visited\n",
    "        if node not in visited:\n",
    "            # add neighbours\n",
    "            nearby = graph[node]\n",
    "            # add node to list of checked nodes\n",
    "            visited.append(node)\n",
    "            if node == end:\n",
    "                return visited\n",
    "            # add nearby to queue\n",
    "            for nearby in nearby:\n",
    "                queue.append(nearby)\n",
    "    print \"no path\"\n",
    "\n",
    "# implement DFS\n",
    "def dfs_graph(graph, start, end):\n",
    "    # put the start on top of the stack\n",
    "    stack = [start]\n",
    "    # list of all visited nodes\n",
    "    visited = []\n",
    "    # looping until stack is empty\n",
    "    while stack:\n",
    "        # explore top most element in stack\n",
    "        node = stack.pop()\n",
    "        # if not previously visited\n",
    "        if node not in visited:\n",
    "            # add neighbours\n",
    "            nearby = graph[node]\n",
    "            # add node to list of checked nodes\n",
    "            visited.append(node)\n",
    "            if node == end:\n",
    "                return visited\n",
    "            # add nearby to queue\n",
    "            for nearby in nearby:\n",
    "                stack.append(nearby)\n",
    "    print \"no path\"\n",
    "    \n",
    "# implement Bidirectional DFS\n",
    "def bi_dfs_graph(graph, start, end):\n",
    "    # put the start on top of the stack\n",
    "    stack = [start]\n",
    "    stack1 = [end]\n",
    "    # list of all visited nodes\n",
    "    visited = []\n",
    "    visited1 = []\n",
    "    # looping until stack is empty\n",
    "    for i in range(0,13):\n",
    "        # explore top most element in stack\n",
    "        if stack:\n",
    "            node = stack.pop()\n",
    "        if stack1:\n",
    "            node1 = stack1.pop()\n",
    "        # if not previously visited\n",
    "        if node not in visited:\n",
    "            # add neighbours\n",
    "            nearby = graph[node]\n",
    "            # add node to list of checked nodes\n",
    "            visited.append(node)\n",
    "            if node in visited1:\n",
    "                target = visited1.index(node)\n",
    "                return visited,visited1[:target+1]\n",
    "            if node == end:\n",
    "                return visited,visited1\n",
    "            # add nearby to queue\n",
    "            for nearby in nearby:\n",
    "                stack.append(nearby)\n",
    "        if node1 not in visited1:\n",
    "            # add neighbours\n",
    "            nearby1 = graph[node1]\n",
    "            # add node to list of checked nodes\n",
    "            visited1.append(node1)\n",
    "            if node1 in visited:\n",
    "                target = visited.index(node1)\n",
    "                return visited[:target+1],visited1\n",
    "            if node1 == start:\n",
    "                return visited,visited1\n",
    "            # add nearby to queue\n",
    "            for nearby1 in nearby1:\n",
    "                stack1.append(nearby1)\n",
    "    print \"no path\"\n",
    "    \n",
    "# implement DLS(Depth limited search)\n",
    "def dls_graph(graph, start, end, depth):\n",
    "    #check if start and end are same\n",
    "    if start == end:\n",
    "        return True\n",
    "    #check if we reached max depth\n",
    "    if depth <=0:\n",
    "        return False\n",
    "    #process for all nearby nodes\n",
    "    for x in graph[start]:\n",
    "        if(dls_graph(graph, x, end, depth-1)):\n",
    "            return True\n",
    "    return False\n",
    "    \n",
    "# implement IDS\n",
    "def ids_graph(graph, start, end, depth):\n",
    "    # start searching from top to bottom of depth\n",
    "    for i in range(0,26):\n",
    "        if(dls_graph(graph, start, end, i)):\n",
    "            return True\n",
    "    return Flase\n",
    "   \n",
    "graph = {}\n",
    "# call the construct world function\n",
    "graph,cordinates = construct_graph()\n",
    "G=nx.Graph(graph)\n",
    "nx.draw(G)\n",
    "#print dfs_graph(graph,'A','N')\n",
    "print bi_dfs_graph(graph,'A','N')\n",
    "#print ids_graph(graph,'A','N',26)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# implementing heuristic distances\n",
    "def heuristic_distances(vertex_a, vertex_b, heuristic):\n",
    "    if heuristic == 'euclidean':\n",
    "        return distance.euclidean(vertex_a,vertex_b)\n",
    "    elif heuristic == 'constant':\n",
    "        return distance.chebyshev(vertex_a,vertex_b)\n",
    "    elif heuristic == 'manhattan':\n",
    "        return distance.cityblock(vertex_a,vertex_b)\n",
    "\n",
    "# implementing greedy best first search\n",
    "def best_first_greedy(graph, cordinates, start, end, heuristic):\n",
    "    target = cordinates[\"vertex\"].index(start)\n",
    "    target1 = cordinates[\"vertex\"].index(end)\n",
    "    a=(cordinates[\"vertex_x\"][target],cordinates[\"vertex_y\"][target])\n",
    "    b=(cordinates[\"vertex_x\"][target1],cordinates[\"vertex_y\"][target1])\n",
    "    distance = heuristic_distances(a, b, heuristic)\n",
    "    expansion = PriorityQueue()\n",
    "    expansion.put(start,distance)\n",
    "    visited=[]\n",
    "    while expansion:\n",
    "        current = expansion.get()\n",
    "        visited.append(current)\n",
    "        if current == end:\n",
    "            return visited\n",
    "        for child in graph[current]:\n",
    "            if child not in visited:\n",
    "                target = cordinates[\"vertex\"].index(current)\n",
    "                target1 = cordinates[\"vertex\"].index(end)\n",
    "                a=(cordinates[\"vertex_x\"][target],cordinates[\"vertex_y\"][target])\n",
    "                b=(cordinates[\"vertex_x\"][target1],cordinates[\"vertex_y\"][target1])\n",
    "                distance = heuristic_distances(a, b, heuristic)\n",
    "                expansion.put(child, distance)\n",
    "    return list(set(visited))\n",
    "print best_first_greedy(graph, cordinates,'A', 'N', heuristic='constant')           "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30.4\n",
      "32.4\n",
      "21.1\n",
      "21.2\n",
      "40.8\n",
      "41.8\n",
      "40.8\n",
      "42.2\n",
      "42.3\n",
      "68.1\n",
      "69.1\n",
      "70.1\n",
      "55.5\n",
      "51.9\n",
      "54.7\n",
      "74.7\n",
      "76.9\n",
      "73.3\n",
      "['A', 'C', 'E', 'L', 'Q', 'H', 'R', 'D', 'K', 'N']\n"
     ]
    }
   ],
   "source": [
    "# implementing heuristic distances\n",
    "def heuristic_distances(vertex_a, vertex_b, heuristic):\n",
    "    if heuristic == 'euclidean':\n",
    "        return distance.euclidean(vertex_a,vertex_b)\n",
    "    elif heuristic == 'constant':\n",
    "        return distance.chebyshev(vertex_a,vertex_b)\n",
    "    elif heuristic == 'manhattan':\n",
    "        return distance.cityblock(vertex_a,vertex_b)\n",
    "\n",
    "\n",
    "# implementing a* search\n",
    "def best_first_greedy(graph, cordinates, start, end, heuristic):\n",
    "    path_cost = 0\n",
    "    target = cordinates[\"vertex\"].index(start)\n",
    "    target1 = cordinates[\"vertex\"].index(end)\n",
    "    a=(cordinates[\"vertex_x\"][target],cordinates[\"vertex_y\"][target])\n",
    "    b=(cordinates[\"vertex_x\"][target1],cordinates[\"vertex_y\"][target1])\n",
    "    distance = heuristic_distances(a, b, heuristic)\n",
    "    expansion = PriorityQueue()\n",
    "    expansion.put(start,distance)\n",
    "    visited=[]\n",
    "    while expansion:\n",
    "        current = expansion.get()\n",
    "        visited.append(current)\n",
    "        if current == end:\n",
    "            return visited\n",
    "        for child in graph[current]:\n",
    "            if child not in visited:\n",
    "                target = cordinates[\"vertex\"].index(current)\n",
    "                target1 = cordinates[\"vertex\"].index(end)\n",
    "                a=(cordinates[\"vertex_x\"][target],cordinates[\"vertex_y\"][target])\n",
    "                b=(cordinates[\"vertex_x\"][target1],cordinates[\"vertex_y\"][target1])\n",
    "                distance = heuristic_distances(a, b, heuristic)\n",
    "                path_cost = path_cost + graph[current][child]\n",
    "                f_cost = distance + path_cost\n",
    "                print f_cost\n",
    "                expansion.put(child, f_cost)\n",
    "    return list(set(visited))\n",
    "print best_first_greedy(graph, cordinates,'A', 'N', heuristic='constant')           "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
